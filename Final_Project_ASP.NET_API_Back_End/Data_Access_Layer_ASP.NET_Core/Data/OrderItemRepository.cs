using Common.Data_Transfer_Object;
using Common.Models;
using Data_Access_Layer_ASP.NET_Core.Data;
using Microsoft.EntityFrameworkCore;

namespace Final_Project_ASP.NET_API_Back_End.Services
{
    public class OrderItemRepository : IOrderItemRepository
    {
        private readonly Data_Access_Layer_ASPNET_CoreContext _context;

        public OrderItemRepository(Data_Access_Layer_ASPNET_CoreContext context)
        {
            _context = context;
        }

        // Add a new order item
        // Updated method to accept OrderItemDataTransferObject (DTO)
        public async Task<OrderItem> AddOrderItemAsync(OrderItemDataTransferObject orderItemDto)
        {
            // Fetch related Order and Book entities using their IDs
            var order = await _context.Orders.FindAsync(orderItemDto.OrderId);
            var book = await _context.Books.FindAsync(orderItemDto.BookId);

            if (order == null || book == null)
            {
                // Return null or handle this error if the related Order or Book doesn't exist
                return null;
            }

            // Map OrderItemDataTransferObject to OrderItem entity
            var orderItem = new OrderItem
            {
                // OrderItemId is auto-generated by the database
                OrderId = orderItemDto.OrderId,
                BookId = orderItemDto.BookId,
                Quantity = orderItemDto.Quantity,
                PriceAtTimeOfPurchase = orderItemDto.PriceAtTimeOfPurchase,

                // Assign related entities (Order and Book) from context
                Order = order, // Associated Order entity
                Book = book     // Associated Book entity
            };

            // Add the entity to the context and save changes
            _context.OrderItems.Add(orderItem);
            await _context.SaveChangesAsync();

            return orderItem; // Return the created entity (not DTO)
        }


        // Get an order item by its ID
        public async Task<OrderItem> GetOrderItemByIdAsync(int orderItemId)
        {
            return await _context.OrderItems
                .Include(oi => oi.Order)
                .Include(oi => oi.Book)
                .FirstOrDefaultAsync(oi => oi.OrderItemId == orderItemId);
        }

        // Get all order items by order ID
        public async Task<IEnumerable<OrderItem>> GetOrderItemsByOrderIdAsync(int orderId)
        {
            return await _context.OrderItems
                .Where(oi => oi.OrderId == orderId)
                .Include(oi => oi.Book)
                .ToListAsync();
        }





        // Update an existing order item
        public async Task UpdateOrderItemAsync(int id, OrderItemDataTransferObject orderItemDto)
        {
            var existingOrderItem = await _context.OrderItems.FindAsync(id);

            if (existingOrderItem == null)
            {
                throw new KeyNotFoundException($"OrderItem with ID {id} not found.");
            }

            existingOrderItem.Quantity = orderItemDto.Quantity;
            existingOrderItem.PriceAtTimeOfPurchase = orderItemDto.PriceAtTimeOfPurchase;

            var book = await _context.Books.FindAsync(orderItemDto.BookId);
            if (book == null)
            {
                throw new KeyNotFoundException($"Book with ID {orderItemDto.BookId} not found.");
            }

            existingOrderItem.BookId = orderItemDto.BookId;
            existingOrderItem.Book = book;

            _context.OrderItems.Update(existingOrderItem);
            await _context.SaveChangesAsync();
        }

        // Delete an order item by ID
        public async Task DeleteOrderItemAsync(int id)
        {
            var orderItem = await _context.OrderItems.FindAsync(id);

            if (orderItem == null)
            {
                throw new KeyNotFoundException($"OrderItem with ID {id} not found.");
            }

            _context.OrderItems.Remove(orderItem);
            await _context.SaveChangesAsync();
        }
    }






}
